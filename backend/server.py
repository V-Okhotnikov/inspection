from fastapi import FastAPI, APIRouter, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from contextlib import asynccontextmanager
from pydantic import BaseModel, Field
from typing import List, Optional
import os
import logging
from datetime import datetime, timezone
import uuid
import uvicorn

app.add_middleware(
    CORSMiddleware,
    allow_origins=[
        "https://inspectionrbi.netlify.app",  # –≤–∞—à Netlify URL
        "http://localhost:3000",  # –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    ],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
status_checks_storage = []

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class StatusCheck(BaseModel):
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    client_name: str
    timestamp: datetime = Field(default_factory=lambda: datetime.now(timezone.utc))
    status: str = "active"

class StatusCheckCreate(BaseModel):
    client_name: str
    status: Optional[str] = "active"

class HealthResponse(BaseModel):
    status: str
    service: str
    timestamp: datetime
    version: str = "1.0.0"

@asynccontextmanager
async def lifespan(app: FastAPI):
    # Startup
    logger.info("üöÄ Starting Inspection Backend Service")
    logger.info(f"üìç Port: {os.environ.get('PORT', 8000)}")
    
    yield
    
    # Shutdown
    logger.info("üõë Shutting down Inspection Backend Service")

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="Inspection Backend API",
    description="Backend service for inspection application",
    version="1.0.0",
    lifespan=lifespan
)

# –†–æ—É—Ç–µ—Ä –¥–ª—è API
api_router = APIRouter(prefix="/api")

@api_router.get("/", response_model=dict)
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç API"""
    return {
        "message": "Welcome to Inspection Backend API",
        "status": "operational",
        "version": "1.0.0",
        "timestamp": datetime.now(timezone.utc).isoformat()
    }

@api_router.get("/health", response_model=HealthResponse)
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    return HealthResponse(
        status="healthy",
        service="inspection-backend",
        timestamp=datetime.now(timezone.utc)
    )

@api_router.post("/status", response_model=StatusCheck)
async def create_status_check(status_data: StatusCheckCreate):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞"""
    try:
        status_check = StatusCheck(
            client_name=status_data.client_name,
            status=status_data.status
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        status_checks_storage.append(status_check)
        logger.info(f"‚úÖ Status check created for client: {status_data.client_name}")
        
        return status_check
        
    except Exception as e:
        logger.error(f"‚ùå Error creating status check: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

@api_router.get("/status", response_model=List[StatusCheck])
async def get_status_checks():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ —Å—Ç–∞—Ç—É—Å–∞"""
    return status_checks_storage

@api_router.get("/status/{status_id}", response_model=StatusCheck)
async def get_status_check(status_id: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ ID"""
    for check in status_checks_storage:
        if check.id == status_id:
            return check
    raise HTTPException(status_code=404, detail="Status check not found")

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
app.include_router(api_router)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –†–∞–∑—Ä–µ—à–∏—Ç—å –≤—Å–µ –¥–æ–º–µ–Ω—ã –¥–ª—è —Ç–µ—Å—Ç–∞
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è Render
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 8000))
    logger.info(f"üéØ Starting server on 0.0.0.0:{port}")
    
    uvicorn.run(
        "server:app",
        host="0.0.0.0",
        port=port,
        reload=False,
        access_log=True,
        log_level="info"
    )


